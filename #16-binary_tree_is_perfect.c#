#include "binary_trees.h"
#include <stdio.h>
#include <stdlib.h>

/**
 * binary_tree_is_full - Checking if binary tree is full
 * @tree: pointer to the node
 *
 * Return: 0
 */

/**
 * binary_tree_size - size of a binary tree
 * @tree: pointer to the node
 *
 * Return: size
 */

size_t binary_tree_size(const binary_tree_t *tree)
{
  if (tree == NULL)
    {
      return (0);
    }
  else
    {
      size_t l_size = 0, r_size = 0;
      
      if (tree->left)
	{
	  l_size = binary_tree_size(tree->left);
	}
      else
	l_size = 0;

      if (tree->right)
	{
	  r_size = binary_tree_size(tree->right);
	}
      else
	r_size = 0;

      return (l_size + r_size + 1);
    }
}

/**
 * binary_tree_postorder - Traversing in postorder
 * @tree: pointer to the
 * @func: pointer to a function
 */

void binary_tree_postorder(const binary_tree_t *tree, void (*func)(int))
{
  if ((tree == NULL) || (func == NULL))
    return;

  binary_tree_postorder(tree->left, func);
  binary_tree_postorder(tree->right, func);
  func(tree->n);
}

int binary_tree_is_perfect(const binary_tree_t *tree)
{
	if (tree)
	{
/*
*		l_size = tree->left ? binary_tree_size(tree->left) : 0;
*		r_size = tree->right ? binary_tree_size(tree->right) : 0;
*/
		if ((tree->left == NULL) && (tree->right == NULL))
			return (1);

		if ((tree->left) && (tree->right))
		{
			return (binary_tree_is_full(tree->left)
					&& binary_tree_is_full(tree->right));
		}
		else
			return (0);
	}
	return (0);
}
